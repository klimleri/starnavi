{"version":3,"sources":["components/Leader/index.js","components/Loader/index.js","components/Square/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Leader","props","className","winners","map","winner","key","id","date","Loader","Square","isBlue","isGreen","isRed","clickable","styles","backgroundColor","cursor","started","style","onClick","handleClick","data-id","Game","handleChangeMode","e","mode","target","value","setState","prevState","field","gameSettings","delay","createField","state","handleChangeName","userName","handleStart","ended","resetArray","arrayOfSquares","interval","setInterval","blueSquare","filter","square","length","Math","round","endGame","clearInterval","availableSquares","available","activeSquare","floor","random","name","winnerName","postData","dataset","size","i","Date","dateToSend","toTimeString","slice","getDate","toLocaleDateString","month","getFullYear","dataToSend","fetch","method","headers","body","JSON","stringify","then","response","json","data","catch","err","console","log","isLoad","resp","Object","keys","this","TextField","select","label","onChange","setting","MenuItem","Button","variant","disabled","maxWidth","item","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oZAqBeA,MAlBf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,kBAAf,gBACA,yBAAKA,UAAU,kBAEPD,EAAME,QAAQC,KAAI,SAAAC,GAAM,OACpB,yBAAKH,UAAU,uBAAuBI,IAAKD,EAAOE,IAC9C,yBAAKL,UAAU,gBAAgBG,EAAOA,QACtC,yBAAKH,UAAU,gBAAgBG,EAAOG,aCDnDC,G,MARA,WACX,OACI,yBAAKP,UAAU,WACX,yBAAKA,UAAU,qBCSZQ,G,MAZA,SAACT,GAAW,IACfU,EAA+CV,EAA/CU,OAAQC,EAAuCX,EAAvCW,QAASC,EAA8BZ,EAA9BY,MAAOC,EAAuBb,EAAvBa,UAC1BC,EAAS,CACXC,gBAAiBL,EAAS,UAAaC,EAAU,UAAaC,EAAQ,UAAY,QAClFI,OAHmDhB,EAAZiB,SAGpBJ,EAAY,UAAY,WAG/C,OACI,yBAAKZ,UAAU,SAASiB,MAAOJ,EAAQK,QAASnB,EAAMoB,YAAaC,UAASrB,EAAMM,OCyP3EgB,E,YA5PX,WAAYtB,GAAO,IAAD,8BACd,4CAAMA,KA8CVuB,iBAAmB,SAACC,GAChB,IAAMC,EAAOD,EAAEE,OAAOC,MAEtB,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC1BJ,KAAMA,EACNK,MAAOD,EAAUE,aAAaN,GAAMK,MACpCE,MAAOH,EAAUE,aAAaN,GAAMO,UAGxC,EAAKC,YAAY,EAAKC,MAAMH,aAAaN,GAAMK,QAxDjC,EA2DlBK,iBAAmB,SAACX,GAChB,EAAKI,SAAS,CACVQ,SAAUZ,EAAEE,OAAOC,SA7DT,EAiElBU,YAAc,WAAO,IAAD,EACS,EAAKH,MAAtBJ,EADQ,EACRA,MAER,GAHgB,EACDQ,MAEJ,CACP,IAAMC,EAAa,EAAKN,YAAYH,GAEpC,EAAKF,SAAS,CACVY,eAAgBD,EAChBD,OAAO,IAIf,EAAKV,SAAS,CACVX,SAAS,IAGb,EAAKwB,YAjFS,EAoFlBA,SAAW,WACP,IAAMA,EAAWC,aAAY,WAAO,IAAD,EACa,EAAKR,MAAzCM,EADuB,EACvBA,eAAgBV,EADO,EACPA,MAAOM,EADA,EACAA,SAEzBO,EAAaH,EAAeI,QAAO,SAAAC,GAAM,OAAIA,EAAOnC,UAO1D,GANIiC,EAAWG,SACXN,EAAeG,EAAW,GAAGrC,IAAII,QAAS,EAC1C8B,EAAeG,EAAW,GAAGrC,IAAIM,OAAQ,EACzC4B,EAAeG,EAAW,GAAGrC,IAAIO,WAAY,GAG7C2B,EAAeI,QAAO,SAAAC,GAAM,OAAIA,EAAOlC,WAASmC,SAAWC,KAAKC,MAAM,SAAClB,EAAO,GAAK,GACnF,EAAKmB,QAAQb,GACbc,cAAcT,QACX,GAAID,EAAeI,QAAO,SAAAC,GAAM,OAAIA,EAAOjC,SAAOkC,SAAWC,KAAKC,MAAM,SAAClB,EAAO,GAAK,GACxF,EAAKmB,QAAQ,eACbC,cAAcT,OACX,CACH,IAAMU,EAAmBX,EAAeI,QAAO,SAAAC,GAAM,OAAIA,EAAOO,aAChE,GAAID,EAAiBL,OAAQ,CACzB,IACMO,EAAeF,EADDJ,KAAKO,MAAOP,KAAKQ,SAASJ,EAAiBL,SAE/DN,EAAea,EAAa/C,IAAII,QAAS,EACzC8B,EAAea,EAAa/C,IAAI8C,WAAY,EAE5C,EAAKxB,SAAS,CACVuB,iBAAkBA,QAI/B,EAAKjB,MAAMF,QAlHA,EAqHlBiB,QAAU,SAACO,GACP,EAAK5B,SAAS,CACVX,SAAS,EACTqB,OAAO,EACPmB,WAAYD,IAEhB,EAAKE,YA3HS,EA8HlBtC,YAAc,SAACI,GAAO,IACVgB,EAAmB,EAAKN,MAAxBM,eACFK,EAASL,EAAehB,EAAEE,OAAOiC,QAAQrD,IAC5CuC,EAAOnC,SACN8B,EAAeK,EAAOvC,IAAII,QAAS,EACnC8B,EAAeK,EAAOvC,IAAIK,SAAU,EACpC6B,EAAeK,EAAOvC,IAAIO,WAAY,EAEtC,EAAKe,SAAS,CACVY,eAAgBA,MAvIV,EA4IlBP,YAAc,SAAC2B,GAEX,IADA,IAAIpB,EAAiB,GACZqB,EAAI,EAAGA,EAAC,SAAGD,EAAQ,GAAGC,IAC3BrB,EAAeqB,GAAK,CAChBvD,GAAIuD,EACJnD,OAAQ,KACRC,QAAS,KACTC,MAAO,KACPC,WAAW,EACXuC,WAAW,GAQnB,OAJA,EAAKxB,SAAS,CACVY,eAAgBA,IAGbA,GA7JO,EAgKlBkB,SAAW,WACP,IACMnD,EAAO,IAAIuD,KACXC,EAAU,UAAMxD,EAAKyD,eAAeC,MAAM,EAAG,GAAnC,aAA0C1D,EAAK2D,UAA/C,YAA4D3D,EAAK4D,mBAAmB,QAAS,CAACC,MAAO,SAArG,YAAiH7D,EAAK8D,eAEhIC,EAAa,CACflE,OAAQ,EAAK8B,MAAMuB,WACnBlD,KAAMwD,GAGV,OAAOQ,MATK,4DASM,CACdC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUN,KAEpBO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACH,EAAKpD,SAAS,CACV1B,QAAS8E,OAGhBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OArLpB,EAAKhD,MAAQ,CACTH,aAAc,KACdN,KAAM,GACNK,MAAO,KACPE,MAAO,KACP9B,QAAS,KACTuD,WAAY,KACZrB,SAAU,GACViD,QAAQ,EACRpE,SAAS,EACTqB,OAAO,GAbG,E,iFAiBG,IAAD,OAChBiC,MAAM,mEACDM,MAAK,SAACS,GACH,OAAOA,EAAKP,UAEfF,MAAK,SAACG,GACH,EAAKpD,SAAS,CACVG,aAAciD,EACdlD,MAAOkD,EAAKO,OAAOC,KAAKR,GAAM,IAAIlD,QAGtCyC,MAAM,6DACDM,MAAK,SAACS,GACH,OAAOA,EAAKP,UAEfF,MAAK,SAACG,GACH,EAAKpD,SAAS,CACVyD,QAAQ,EACRnF,QAAS8E,OAGhBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,SAGvBD,OAAM,SAAAC,GACHC,QAAQC,IAAIF,Q,+BAiJd,IAAD,SACwGO,KAAKvD,MAA1GmD,EADH,EACGA,OAAQtD,EADX,EACWA,aAAcN,EADzB,EACyBA,KAAMK,EAD/B,EAC+BA,MAAOU,EADtC,EACsCA,eAAgBtC,EADtD,EACsDA,QAASuD,EAD/D,EAC+DA,WAAYrB,EAD3E,EAC2EA,SAAUnB,EADrF,EACqFA,QAASqB,EAD9F,EAC8FA,MAEnG,OACI+C,EACI,oCACI,yBAAKpF,UAAU,QACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,kBAACyF,EAAA,EAAD,CACIC,QAAM,EACNC,MAAM,iBACN3F,UAAU,SACV0B,MAAOF,EACPoE,SAAUJ,KAAKlE,kBAEdgE,OAAOC,KAAKzD,GAAc5B,KAAI,SAAC2F,EAASjC,GAAV,OAC3B,kBAACkC,EAAA,EAAD,CAAU1F,IAAKwD,EAAGlC,MAAOmE,GACpBA,QAKjB,yBAAK7F,UAAU,cACX,kBAACyF,EAAA,EAAD,CACIE,MAAO,kBACP3F,UAAU,QACV0B,MAAOS,EACPyD,SAAUJ,KAAKtD,oBAGvB,yBAAKlC,UAAU,cACX,kBAAC+F,EAAA,EAAD,CACIC,QAAQ,YACRhG,UAAW,cACXiG,UAAYzE,IAASW,GAAYnB,EACjCE,QAASsE,KAAKpD,aAEbC,EAAQ,aAAe,UAIpC,yBAAKrC,UAAU,iBACVqC,GAAK,UAAOmB,EAAP,SAGNjB,GACA,yBAAKvC,UAAU,cAAciB,MAAO,CAAEiF,SAAS,GAAD,OAAK,GAAKrE,EAAV,QAEtCU,EAAerC,KAAI,SAAAiG,GACf,OAAO,kBAAC,EAAD,eAAQ/F,IAAK+F,EAAK9F,IAAQ8F,EAA1B,CAAgCnF,QAASA,EAASG,YAAa,EAAKA,oBAM/F,kBAAC,EAAD,CAAQlB,QAASA,KAGrB,kBAAC,EAAD,U,GAxPGmG,aCKJC,MARf,WACE,OACE,yBAAKrG,UAAU,OACb,kBAAC,EAAD,QCKcsG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.ea6c5a82.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Leader(props) {\r\n    return (\r\n        <div className=\"winners\">\r\n            <div className=\"winners__title\">Leader Board</div>\r\n            <div className=\"winners__block\">\r\n                {\r\n                    props.winners.map(winner => (\r\n                        <div className=\"winners__item winner\" key={winner.id}>\r\n                            <div className=\"winner__name\">{winner.winner}</div>\r\n                            <div className=\"winner__time\">{winner.date}</div>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Leader;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loading\">\r\n            <div className=\"lds-dual-ring\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Square = (props) => {\r\n    const { isBlue, isGreen, isRed, clickable, started } = props;\r\n    const styles = {\r\n        backgroundColor: isBlue ? '#42d8e8' : (isGreen ? '#00e871' : (isRed ? '#e85a5f' : 'white') ),\r\n        cursor: started && clickable ? 'pointer' : 'default'\r\n    }\r\n\r\n    return (\r\n        <div className=\"square\" style={styles} onClick={props.handleClick} data-id={props.id}/>\r\n    );\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from 'react';\r\nimport { TextField, MenuItem, Button } from '@material-ui/core';\r\nimport './style.css';\r\nimport Leader from \"../Leader\";\r\nimport Loader from \"../Loader\";\r\nimport Square from \"../Square\";\r\n\r\nclass Game extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            gameSettings: null,\r\n            mode: '',\r\n            field: null,\r\n            delay: null,\r\n            winners: null,\r\n            winnerName: null,\r\n            userName: '',\r\n            isLoad: false,\r\n            started: false,\r\n            ended: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://starnavi-frontend-test-task.herokuapp.com/game-settings\")\r\n            .then((resp) => {\r\n                return resp.json();\r\n            })\r\n            .then((data) => {\r\n                this.setState({\r\n                    gameSettings: data,\r\n                    field: data[Object.keys(data)[0]].field\r\n                });\r\n\r\n                fetch(\"https://starnavi-frontend-test-task.herokuapp.com/winners\")\r\n                    .then((resp) => {\r\n                        return resp.json();\r\n                    })\r\n                    .then((data) => {\r\n                        this.setState({\r\n                            isLoad: true,\r\n                            winners: data\r\n                        });\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                    });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    handleChangeMode = (e) => {\r\n        const mode = e.target.value;\r\n\r\n        this.setState((prevState) => ({\r\n            mode: mode,\r\n            field: prevState.gameSettings[mode].field,\r\n            delay: prevState.gameSettings[mode].delay\r\n        }));\r\n\r\n        this.createField(this.state.gameSettings[mode].field);\r\n    }\r\n\r\n    handleChangeName = (e) => {\r\n        this.setState({\r\n            userName: e.target.value\r\n        });\r\n    }\r\n\r\n    handleStart = () => {\r\n        const { field, ended } = this.state;\r\n\r\n        if (ended) {\r\n            const resetArray = this.createField(field);\r\n\r\n            this.setState({\r\n                arrayOfSquares: resetArray,\r\n                ended: false\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            started: true\r\n        });\r\n\r\n        this.interval();\r\n    }\r\n\r\n    interval = () => {\r\n        const interval = setInterval(() => {\r\n            const { arrayOfSquares, field, userName } = this.state;\r\n\r\n            const blueSquare = arrayOfSquares.filter(square => square.isBlue);\r\n            if (blueSquare.length) {\r\n                arrayOfSquares[blueSquare[0].id].isBlue = false;\r\n                arrayOfSquares[blueSquare[0].id].isRed = true;\r\n                arrayOfSquares[blueSquare[0].id].clickable = false;\r\n            }\r\n\r\n            if (arrayOfSquares.filter(square => square.isGreen).length === Math.round((field**2) / 2)) {\r\n                this.endGame(userName);\r\n                clearInterval(interval);\r\n            } else if (arrayOfSquares.filter(square => square.isRed).length === Math.round((field**2) / 2)) {\r\n                this.endGame('Computer AI');\r\n                clearInterval(interval);\r\n            } else {\r\n                const availableSquares = arrayOfSquares.filter(square => square.available);\r\n                if (availableSquares.length) {\r\n                    const randomIndex = Math.floor((Math.random()*availableSquares.length));\r\n                    const activeSquare = availableSquares[randomIndex];\r\n                    arrayOfSquares[activeSquare.id].isBlue = true;\r\n                    arrayOfSquares[activeSquare.id].available = false;\r\n\r\n                    this.setState({\r\n                        availableSquares: availableSquares\r\n                    });\r\n                }\r\n            }\r\n        }, this.state.delay);\r\n    }\r\n\r\n    endGame = (name) => {\r\n        this.setState({\r\n            started: false,\r\n            ended: true,\r\n            winnerName: name\r\n        });\r\n        this.postData();\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        const { arrayOfSquares } = this.state;\r\n        const square = arrayOfSquares[e.target.dataset.id];\r\n        if(square.isBlue) {\r\n            arrayOfSquares[square.id].isBlue = false;\r\n            arrayOfSquares[square.id].isGreen = true;\r\n            arrayOfSquares[square.id].clickable = false;\r\n\r\n            this.setState({\r\n                arrayOfSquares: arrayOfSquares\r\n            });\r\n        }\r\n    }\r\n\r\n    createField = (size) => {\r\n        let arrayOfSquares = [];\r\n        for (let i = 0; i < size ** 2; i++) {\r\n            arrayOfSquares[i] = {\r\n                id: i,\r\n                isBlue: null,\r\n                isGreen: null,\r\n                isRed: null,\r\n                clickable: true,\r\n                available: true\r\n            };\r\n        }\r\n\r\n        this.setState({\r\n            arrayOfSquares: arrayOfSquares\r\n        });\r\n\r\n        return arrayOfSquares;\r\n    }\r\n\r\n    postData = () => {\r\n        const url = \"https://starnavi-frontend-test-task.herokuapp.com/winners\";\r\n        const date = new Date();\r\n        const dateToSend = `${date.toTimeString().slice(0, 5)}; ${date.getDate()} ${date.toLocaleDateString(\"en-US\", {month: 'long'})} ${date.getFullYear()}`;\r\n\r\n        const dataToSend = {\r\n            winner: this.state.winnerName,\r\n            date: dateToSend\r\n        }\r\n\r\n        return fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(dataToSend)\r\n        })\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                this.setState({\r\n                    winners: data\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { isLoad, gameSettings, mode, field, arrayOfSquares, winners, winnerName, userName, started, ended } = this.state;\r\n\r\n        return (\r\n            isLoad ?\r\n                <>\r\n                    <div className=\"game\">\r\n                        <div className=\"game__settings\">\r\n                            <div className=\"game__mode\">\r\n                                <TextField\r\n                                    select\r\n                                    label=\"Pick game mode\"\r\n                                    className=\"select\"\r\n                                    value={mode}\r\n                                    onChange={this.handleChangeMode}\r\n                                >\r\n                                    {Object.keys(gameSettings).map((setting, i) => (\r\n                                        <MenuItem key={i} value={setting}>\r\n                                            {setting}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </div>\r\n                            <div className=\"game__user\">\r\n                                <TextField\r\n                                    label={\"Enter your name\"}\r\n                                    className=\"input\"\r\n                                    value={userName}\r\n                                    onChange={this.handleChangeName}\r\n                                />\r\n                            </div>\r\n                            <div className=\"game__play\">\r\n                                <Button\r\n                                    variant='contained'\r\n                                    className={'play-button'}\r\n                                    disabled={(!mode || !userName || started)}\r\n                                    onClick={this.handleStart}\r\n                                >\r\n                                    {ended ? 'Play Again' : 'Play'}\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"game__message\">\r\n                            {ended && `${winnerName} won`}\r\n                        </div>\r\n                        {\r\n                            arrayOfSquares &&\r\n                            <div className=\"game__field\" style={{ maxWidth: `${50 * field}px` }}>\r\n                                {\r\n                                    arrayOfSquares.map(item => {\r\n                                        return <Square key={item.id} {...item} started={started} handleClick={this.handleClick} />\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <Leader winners={winners} />\r\n                </>\r\n                :\r\n                <Loader/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport './App.css';\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}